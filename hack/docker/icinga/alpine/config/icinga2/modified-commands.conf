object CheckCommand "any_http" {
    import "plugin-check-command"
	import "ipv4-or-ipv6"

	command = [ PluginDir + "/check_http" ]

	arguments = {
		"-H" = "$httpVhost$"
		"-I" = "$httpAddress$"
		"-u" = "$httpURI$"
		"-p" = "$httpPort$"
		"-S" = {
			set_if = "$httpSSL$"
		}
		"-S1" = {
			set_if = "$httpSSLForceTLSv1$"
		}
		"-S1.1" = {
			set_if = "$httpSSLForceTLSv1_1$"
		}
		"-S1.2" = {
			set_if = "$httpSSLForceTLSv1_2$"
		}
		"-S2" = {
			set_if = "$httpSSLForceSSLv2$"
		}
		"-S3" = {
			set_if = "$httpSSLForceSSLv3$"
		}
		"-S1+" = {
			set_if = "$httpSSLForceTLSv1_or_higher$"
		}
		"-S1.1+" = {
			set_if = "$httpSSLForceTLSv1_1_or_higher$"
		}
		"-S1.2+" = {
			set_if = "$httpSSLForceTLSv1_2_or_higher$"
		}
		"-S2+" = {
			set_if = "$httpSSLForceSSLv2_or_higher$"
		}
		"-S3+" = {
			set_if = "$httpSSLForceSSLv3_or_higher$"
		}
		"--sni" = {
			set_if = "$httpSNI$"
		}
		"-C" = {
			value = "$httpCertificate$"
			description = "Minimum number of days a certificate has to be valid. This parameter explicitely sets the port to 443 and ignores the URL if passed."
		}
		"-J" = {
			value = "$httpClientcert$"
			description = "Name of file contains the client certificate (PEM format)"
		}
		"-K" = {
			value = "$httpPrivatekey$"
			description = "Name of file contains the private key (PEM format)"
		}
		"-a" = {
			value = "$httpAuthPair$"
			description = "Username:password on sites with basic authentication"
		}
		"--no-body" = {
			set_if = "$httpIgnoreBody$"
		}
		"-w" = "$httpWarnTime$"
		"-c" = "$httpCriticalTime$"
		"-e" = "$httpExpect$"
		"-d" = {
			value = "$httpHeaderstring$"
			description = "String to expect in the response headers"
		}
		"-s" = {
			value = "$httpString$"
			description = "String to expect in the content"
		}
		"-P" = {
			value = "$httpPost$"
			description = "URL encoded http POST data"
		}
		"-j" = {
			value = "$httpMethod$"
			description = "Set http method (for example: HEAD, OPTIONS, TRACE, PUT, DELETE)"
		}
		"-M" = {
			value = "$httpMaxage$"
			description = "Warn if document is more than seconds old"
		}
		"-T" = {
			value = "$httpcontenttype$"
			description = "Specify Content-Type header when POSTing"
		}
		"-l" = {
			set_if = "$httpLinespan$"
			description = "Allow regex to span newline"
			order = 1
		}
		"-r" = {
			value = "$httpExpectBodyRegex$"
			description = "Search page for regex"
			order = 2
		}
		"-R" = {
			value = "$httpExpectBodyEregi$"
			description = "Search page for case-insensitive regex"
			order = 2
		}
		"--invert-regex" = {
			set_if = "$httpInvertregex$"
			description = "Return Critical if found, OK if not"
		}
		"-b" = {
			value = "$httpProxyAuthPair$"
			description = "Username:password on proxy-servers with basic authentication"
		}
		"-A" = {
			value = "$httpUseragent$"
			description = "String to be sent in http header as User Agent"
		}
		"-k" = {
			value = "$httpHeader$"
			description = "Any other tags to be sent in http header"
		}
		"-E" = {
			set_if = "$httpExtendedperfdata$"
			description = "Print additional perfdata"
		}
		"-f" = {
			value = "$httpOnredirect$"
			description = "How to handle redirect pages"
		}
		"-m" = {
			value = "$httpPagesize$"
			description = "Minim page size required:Maximum page size required"
		}
		"-t" = {
			value = "$httpTimeout$"
			description = "Seconds before connection times out"
		}
		"-4" = {
			set_if = "$httpIPv4$"
			description = "Use IPv4 connection"
		}
		"-6" = {
			set_if = "$httpIPv6$"
			description = "Use IPv6 connection"
		}
	}

	vars.httpSSL = false
	vars.http_sni = false
	vars.http_linespan = false
	vars.http_invertregex = false
	vars.check_ipv4 = "$httpIPv4$"
	vars.check_ipv6 = "$httpIPv6$"
}
