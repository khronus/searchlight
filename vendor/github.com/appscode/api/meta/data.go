// Code generated by go-bindata.
// sources:
// meta/config.yaml
// DO NOT EDIT!

package meta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xc1\x6e\xdb\x30\x0c\x40\xef\xfa\x0a\x22\x39\xcf\x46\x76\xcc\xcd\xcd\x8a\xcd\x40\x07\x14\x48\xb7\x3b\x2d\xb1\x31\x51\x99\x12\x24\xca\x43\xff\x7e\x70\x8a\xb8\x29\x5a\x04\x4e\x4e\x86\xa5\xf7\x48\x8a\xe4\x1a\x76\x41\x9e\xf9\x50\x12\x2a\x07\xc9\xf0\x1c\x12\x34\x8f\xed\xbd\xb8\x18\x58\x34\x57\xd3\xdf\x9e\xd2\x48\x09\xfe\xb1\xf7\x66\x0d\x68\x15\x82\x00\x8b\xe3\x91\x5d\x41\x0f\x03\x69\x1f\x5c\x86\x12\x83\x80\xf6\x04\xf6\x43\x50\xb3\x86\x98\xc2\xc8\x8e\x5c\x65\x8c\xbe\x46\xda\xc2\xaa\x15\xa5\x64\x29\x6a\x48\x6f\x25\xac\xcc\x88\x9e\xdd\x51\x39\xbb\xdc\x1a\x80\x90\x1c\xa5\x2d\x6c\x0c\x80\x84\xbf\x33\x35\x5d\x01\x7c\x83\x55\x8d\x31\x66\x1b\x1c\x55\x3d\xa1\xd7\xbe\xfa\x75\xfc\xd4\x7b\x45\x2d\x79\x65\xb0\x68\x4f\xa2\x6c\x2f\x04\xff\x6e\x00\x8a\x9c\x91\xe4\x4e\x4d\x58\x9c\xe7\x13\x36\x85\xab\xc6\x4d\x47\x8a\x9b\xaa\xf9\x50\x45\xfd\x10\x0e\x2c\x5f\x38\x2f\xa5\xa3\x24\xa4\x94\x67\x73\xe7\x4b\x56\x4a\x79\x4a\x94\xb4\xc4\x53\xc3\xae\x72\x5b\xc9\x8a\x62\xe9\xee\xb5\x7d\xfc\x42\x1d\x90\x3d\xcb\xc1\x73\xd6\xd9\xfd\xfd\x76\xf6\xc0\x59\xeb\x3d\x89\xbb\x9f\xa0\x5b\xdc\xd2\x65\x9b\xb8\xa3\x1b\xdc\x3f\x92\x2f\xd8\x82\x03\xe5\x88\x96\x66\xf7\x89\x70\xc8\xf5\x2e\x11\xea\x35\xc2\x4f\xd2\x2b\xe8\x36\x37\x23\xb2\xc7\xce\x2f\xcb\x71\xc7\x7e\x7a\x50\xbd\xf3\x4c\xa2\x4f\xe1\x85\x8e\x93\x9f\xc1\xc6\x0d\x2c\xcd\xc2\xdd\xb3\xfc\xbe\x52\x07\x12\xbd\xf0\xda\xcf\xe8\x0f\xf2\xb4\xb0\x31\xa7\xa2\xcf\xa6\xf7\x3f\x00\x00\xff\xff\x24\xe4\xb6\xeb\x2f\x04\x00\x00")

func metaConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_metaConfigYaml,
		"meta/config.yaml",
	)
}

func metaConfigYaml() (*asset, error) {
	bytes, err := metaConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta/config.yaml", size: 1071, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta/config.yaml": metaConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"meta": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{metaConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

