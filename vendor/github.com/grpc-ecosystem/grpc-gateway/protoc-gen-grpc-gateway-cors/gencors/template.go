package gencors

import (
	"bytes"
	"text/template"

	"github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway/descriptor"
)

func applyTemplate(file *descriptor.File) (string, error) {
	w := bytes.NewBuffer(nil)
	if err := headerTemplate.Execute(w, file); err != nil {
		return "", err
	}
	if err := corsTemplate.Execute(w, file.Services); err != nil {
		return "", err
	}
	return w.String(), nil
}

var (
	headerTemplate = template.Must(template.New("header").Parse(`
// Code generated by protoc-gen-grpc-gateway-cors
// source: {{.GetName}}
// DO NOT EDIT!

/*
Package {{.GoPkg.Name}} is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package {{.GoPkg.Name}}
import "github.com/grpc-ecosystem/grpc-gateway/runtime"

`))

	corsTemplate = template.Must(template.New("cors").Parse(`
{{range $svc := .}}
// Export{{$svc.GetName}}CorsPatterns returns an array of grpc gatway mux patterns for
// {{$svc.GetName}} service to enable CORS.
func Export{{$svc.GetName}}CorsPatterns() []runtime.Pattern {
	return []runtime.Pattern{
		{{range $m := $svc.Methods }}{{range $b := $m.Bindings -}}
		pattern_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}},
		{{end}}{{end -}}
	}
}
{{end}}`))
)
