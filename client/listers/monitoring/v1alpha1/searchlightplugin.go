/*
Copyright 2018 The Searchlight Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/appscode/searchlight/apis/monitoring/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SearchlightPluginLister helps list SearchlightPlugins.
type SearchlightPluginLister interface {
	// List lists all SearchlightPlugins in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SearchlightPlugin, err error)
	// SearchlightPlugins returns an object that can list and get SearchlightPlugins.
	SearchlightPlugins(namespace string) SearchlightPluginNamespaceLister
	SearchlightPluginListerExpansion
}

// searchlightPluginLister implements the SearchlightPluginLister interface.
type searchlightPluginLister struct {
	indexer cache.Indexer
}

// NewSearchlightPluginLister returns a new SearchlightPluginLister.
func NewSearchlightPluginLister(indexer cache.Indexer) SearchlightPluginLister {
	return &searchlightPluginLister{indexer: indexer}
}

// List lists all SearchlightPlugins in the indexer.
func (s *searchlightPluginLister) List(selector labels.Selector) (ret []*v1alpha1.SearchlightPlugin, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SearchlightPlugin))
	})
	return ret, err
}

// SearchlightPlugins returns an object that can list and get SearchlightPlugins.
func (s *searchlightPluginLister) SearchlightPlugins(namespace string) SearchlightPluginNamespaceLister {
	return searchlightPluginNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SearchlightPluginNamespaceLister helps list and get SearchlightPlugins.
type SearchlightPluginNamespaceLister interface {
	// List lists all SearchlightPlugins in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SearchlightPlugin, err error)
	// Get retrieves the SearchlightPlugin from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SearchlightPlugin, error)
	SearchlightPluginNamespaceListerExpansion
}

// searchlightPluginNamespaceLister implements the SearchlightPluginNamespaceLister
// interface.
type searchlightPluginNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SearchlightPlugins in the indexer for a given namespace.
func (s searchlightPluginNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SearchlightPlugin, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SearchlightPlugin))
	})
	return ret, err
}

// Get retrieves the SearchlightPlugin from the indexer for a given namespace and name.
func (s searchlightPluginNamespaceLister) Get(name string) (*v1alpha1.SearchlightPlugin, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("searchlightplugin"), name)
	}
	return obj.(*v1alpha1.SearchlightPlugin), nil
}
